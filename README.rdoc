=DeceptiCon

==Does this apply to you?

* Your controllers have only seven deadly methods [:index, :show, :new, :create, :edit, :update, :destroy]
* Your controller actions are conventional

    :show, :edit, :update and :destroy require :id in the params
    :create requires attributes for the appropriate object
    :update requires attributes for the appropriate object and an :id
    :index does not need any params

* Your controller actions respond_to :html and :js formats (or others)

  Some actions repond_to both, some respond to one and some actions are completely blocked

* Your controller tests are so similar you get double vision looking at them
  
* You just want to test the basic `should be_success` or `should_not be_success` assertions for each action.
  * but your writting basically the same tests over and over for each controller and each action,
  * and it takes at least 70 lines of controller_spec to test each action with each format, ie;

      describe "show"
        it 'should be available with HTML' do
          get, :show, {:id => @valid_object.id}
          response.should be_success
        end
        it 'should be unavailable with JS' do
          xhr :get, :show, {:id => @valid_object.id}
          response.should_not be_success
        end
      end

* Controller testing is so boring/repetative it makes you cry

* You just want to focus on the interesting behaviours of your controllers 

==DRY your eyes
Here is a controller spec which tests each of the seven actions, each with either format :html or :js and asserts if that action should be successful or not.

  describe NotesController do
    before(:each) do
      assume_logged_in_user
    end

    @object = Note
    @action_mapping = {
      :index => {:html => true,  :ajax => false},
      :show =>  {:html => true,  :ajax => false},
      :new =>   {:html => false, :ajax => true},
      :create =>{:html => false, :ajax => true},
      :edit =>  {:html => false, :ajax => true},
      :update =>{:html => true,  :ajax => true},
      :destroy=>{:html => false, :ajax => false},
    }
    test_mapping
  end


How does that work then?

It works becuase of a module in 'decepticon.rb' which you need to put in your spec dir.  
Then require and include it in your spec_helper.rb (or in specific controller_spec)
  require 'decepticon'
  include DeceptiCon

In your controller_spec you need the variables @object and @action_mapping.  
These are defined inside the first describe block, but *not* inside a :before or :all filter.

@object is the class for the current controller

@action_mapping is a hash with a key for each action which entails another hash.  
This second hash defines the formats which the action will respond_to and entails either true or false to denote if the response.should be_succsess or the response.should_not be_succsess.

Finally (I know, this is a _lot_ of work) add a call to a method provied by the DeceptiCon module

  test_mapping

If your @action_mapping has seven actions and each has two formats then +test_mapping+ will have generated 14 tests, ie;

  it "should respond to index:html"
  it "should respond to new:ajax"
  it "should NOT respond to new:html"


