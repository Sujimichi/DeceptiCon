=DeceptiCon
A way to simplfy your Rails controller tests and make them DRY.

==Does this apply to you?

* Your controllers have only seven deadly methods [:index, :show, :new, :create, :edit, :update, :destroy]
* Your controller actions are conventional

    :show, :edit, :update and :destroy require :id in the params
    :create requires attributes for the appropriate object
    :update requires attributes for the appropriate object and an :id
    :index does not need any params

* Your controller actions respond_to :html and :js formats (or others)

  Some actions repond_to both, some respond to one and some actions are completely blocked

* Your controller tests are so similar you get double vision looking at them
  
* You want to be able to simply test the basic `should be_success` or `should_not be_success` assertions for each action and each format.
  * but your writing basically the same tests over and over for each controller and each action,
  * and it takes at least 10 lines of controller_spec to test just one action with two formats, ie;

      describe "show"
        it 'should be available with HTML' do
          get, :show, {:id => @valid_object.id}
          response.should be_success
        end
        it 'should be unavailable with JS' do
          xhr :get, :show, {:id => @valid_object.id}
          response.should_not be_success
        end
      end
    Which means a controller that tests each format of each action will be at least 70 lines long.

* You just want to focus on the interesting behaviours of your controllers and leave this repetitive stuff to a robot.

* Controller testing is so boring and repetative it makes you cry.

==DRY your eyes
Here is a controller spec which tests each of the seven actions, each with either format :html or :js (:ajax) and asserts if that action should be successful or not.

  require 'spec_helper'
  describe NotesController do
    before(:each) do
      assume_logged_in_user
    end

    @object = Note
    @action_mapping = {
      :index => {:html => true,  :ajax => false},
      :show =>  {:html => true,  :ajax => false},
      :new =>   {:html => false, :ajax => true},
      :create =>{:html => false, :ajax => true},
      :edit =>  {:html => false, :ajax => true},
      :update =>{:html => true,  :ajax => true},
      :destroy=>{:html => false, :ajax => false},
    }
    test_mapping
  end


===What's going on here then?

For each of the seven controller actions in <tt>@action_mapping</tt> a test has been created for each of its two formats.  
Each of the 14 generated tests attempts to make the appropriate request (get, put, post or delete) and asserts if it should be_succsess or not.

====example of generated tests

  it "should respond to index:html"
  it "should respond to new:ajax"
  it "should NOT respond to new:html"

For each of the actions it makes assumptions about what to include in the params.  
* In the case of :index and :new no params are supplied in the request.  
* For :create the params include attributes for the object class of the controller being tested.
* For :update the params include attributes for the object and an :id.
* All other actions (:show, :edit, :destroy) just get an :id.



===How to make it work

First put the 'decepticon.rb' file into your spec dir. Then require and include it in your spec_helper.rb (or in specific controller_spec)
  require 'decepticon'
  include DeceptiCon

In your controller_spec you need to define the variables <tt>@object</tt> and <tt>@action_mapping</tt>.
These should be defined inside a describe block, but *not* inside a +before+ or +all+ filter.
<tt>@object</tt> is the class of the object for the current controller, ie Note for the NotesController.
    @object = Note

<tt>@action_mapping</tt> is a hash with a key for each action which entails another hash which defines the formats which the action will <tt>respond_to</tt> and the expection of the request; <tt>{:action => {:format => expectation of request}}</tt>.
The expectation of the request is either +true+ or +false+ to denote if the <tt>response.should be_succsess</tt> or if the <tt>response.should_not be_succsess</tt>. 
    @action_mapping = { :index => {:html => true,  :ajax => false}, :show =>  {:html => true,  :ajax => true}, ....}


Finally (I know, this is a _lot_ of work) add a call to a method provided by the DeceptiCon module

  test_mapping


Still a work in progress.  More changes and more docs to come.
Currently only supports :html and :js formats but the others can be added easily.  

